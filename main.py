from helper_func import display_email_campaigns, display_user_personas, display_user_responses, save_as_docx
from agents.email_generator.Agent import generate_email_campaigns_for_experiment
from agents.response_evaluator.Agent import evaluate_experiment
from agents.response_simulator.Agent import response_to_email
from agents.persona_generator.Agent import generate_personas
from agents.experiment_generator.Agent import generate_experiments
from llm_models.AgnoAgentModels import set_api_key
from product_input import product_description
import streamlit as st
import time
import io

def main():
    """
    Main function that runs the Streamlit application for AI-Driven A/B Testing.
    This application allows users to conduct AI-powered A/B testing by entering
    a product description and API key.
    """
    # App framework setup
    st.title('AI-Driven A/B Testing for Smarter Decision Making')
    st.subheader('Run AI-Powered A/B Testing for Your Product, Just Enter a Description and API Key to Begin!')

    # Input field for selecting sample population size
    num_people = st.number_input("Select the number of people:", min_value=2, max_value=50)

    # Button to confirm sample population
    if st.button("Submit"):
        if num_people and int(num_people):
            st.success("Sample population accepted!")
    else:
        st.error("Please enter a valid ")
    
    # Input field for API key
    api_key = st.text_input('Enter Google Generative AI API KEY (Required)')
    st.link_button("Click to get API KEY (select create api key in new project)", "https://makersuite.google.com/app/apikey", type="secondary")

    # Use provided API key or fetch from secrets and set it
    api_key = set_api_key(api_key)

    # Initialize session state variables if they don't exist
    if 'resp_content' not in st.session_state:
        st.session_state.resp_content = None
    if 'gen_email_campaign_a' not in st.session_state:
        st.session_state.gen_email_campaign_a = None
    if 'gen_email_campaign_b' not in st.session_state:
        st.session_state.gen_email_campaign_b = None
    if 'users_personas' not in st.session_state:
        st.session_state.users_personas = None
    if 'all_user_responses' not in st.session_state:
        st.session_state.all_user_responses = None
    if 'experiment_valuation' not in st.session_state:
        st.session_state.experiment_valuation = None

    # Reset button to clear all session state variables
    if st.button("Reset Experiment"):
        # Reset all session state variables to None
        st.session_state.resp_content = None
        st.session_state.gen_email_campaign_a = None
        st.session_state.gen_email_campaign_b = None
        st.session_state.users_personas = None
        st.session_state.all_user_responses = None
        st.session_state.experiment_valuation = None

    # Text area for product description input
    product_input = st.text_area(label='Please enter product description: ', placeholder=product_description(), height=300)

    # Use default product description if none provided
    if not product_input:
        product_input = product_description()

    # STEP 1: Generate AB Test Experiment
    if st.button("Generate AB test experiment") and api_key and num_people:
        
        # Show status during experiment generation
        with st.status(f"AB experiment creation started by AI agent", expanded=True) as status:
            st.write(f"Constructing Prompt")
            time.sleep(2)

            st.write("API call to Gemini AI sent")

            # Track time for API call
            start_time = time.time()
            st.session_state.resp_content = generate_experiments(str(1), product_input)
            end_time = time.time()
            
            ab_elapsed_time = round((end_time - start_time), 2)

            st.write(f"Response recieved in {ab_elapsed_time} seconds !!")
            st.write("Formating Response !!")
            time.sleep(1)
            
            status.update(
                label="Response completed !", state="complete", expanded=False
            )
    
        # Display experiment details
        st.markdown(st.session_state.resp_content.experiment_id)
        st.markdown(st.session_state.resp_content.product_description)
        st.markdown(st.session_state.resp_content.experiment_guidelines)

        # Allow editing of experiment guidelines
        if st.session_state.resp_content:
            edited_response = st.text_area("Edit AB test agent response if needed:", value=st.session_state.resp_content.experiment_guidelines)
            st.session_state.resp_content.experiment_guidelines = edited_response

    # STEP 2: Generate Email Campaigns for A/B Testing
    if st.session_state.resp_content and st.button("Generate AB test email_campaign A and B") and api_key:

        # Show status during email campaign generation
        with st.status(f"A and B email being Generated by AI agent", expanded=True) as status:
            st.write(f"Constructing Prompt")
            time.sleep(2)

            st.write("API call to Gemini AI sent")

            # Track time for API call
            start_time = time.time()
            st.session_state.gen_email_campaign_a, st.session_state.gen_email_campaign_b = generate_email_campaigns_for_experiment(st.session_state.resp_content)
            end_time = time.time()
            
            ab_email_elapsed_time = round((end_time - start_time), 2)

            st.write(f"Response recieved in {ab_email_elapsed_time} seconds !!")
            st.write("Formating Response !!")
            time.sleep(1)
            
            status.update(
                label="Response completed !", state="complete", expanded=False
            )

        # Display email campaigns in a dataframe
        df_email = display_email_campaigns(st.session_state.gen_email_campaign_a, st.session_state.gen_email_campaign_b)

        # Allow editing of email campaign details
        if st.session_state.gen_email_campaign_a and st.session_state.gen_email_campaign_b:

            st.session_state.gen_email_campaign_a.variant = st.text_area("Edit campaign A agent response if needed:", value=st.session_state.resp_content.experiment_guidelines)
            # Display other properties of campaign A
            st.session_state.gen_email_campaign_a.subject
            st.session_state.gen_email_campaign_a.body
            st.session_state.gen_email_campaign_a.tone
            st.session_state.gen_email_campaign_a.target_audience

            st.session_state.gen_email_campaign_b.variant = st.text_area("Edit campaign B agent response if needed:", value=st.session_state.resp_content.experiment_guidelines)
            # Display other properties of campaign B
            st.session_state.gen_email_campaign_b.subject
            st.session_state.gen_email_campaign_b.body
            st.session_state.gen_email_campaign_b.tone
            st.session_state.gen_email_campaign_b.target_audience

        # Display email table in Streamlit
        st.subheader("AB Test Email Campaigns")
        st.dataframe(df_email)

        # Provide download option for email campaigns
        st.download_button(
            label="Download email as CSV",
            data=df_email.to_csv().encode("utf-8"),
            file_name='email_campaigns_df.csv',
            mime='text/csv',
            icon=":material/download:",
        )

    # STEP 3: Generate User Personas for Testing
    if st.session_state.gen_email_campaign_a and st.session_state.gen_email_campaign_b and st.button("Generate AB test Users Personas") and num_people:

        # Show status during user persona generation
        with st.status(f"User Personas being Generated by AI agent", expanded=True) as status:
            st.write(f"Constructing Prompt")
            time.sleep(2)

            st.write("API call to Gemini AI sent")

            # Track time for API call
            start_time = time.time()
            st.session_state.users_personas = generate_personas(st.session_state.gen_email_campaign_a.target_audience, st.session_state.gen_email_campaign_b.target_audience, num_people)
            end_time = time.time()
            
            user_persona_elapsed_time = round((end_time - start_time), 2)

            st.write(f"Response recieved in {user_persona_elapsed_time} seconds !!")
            st.write("Formating Response !!")
            time.sleep(1)
            
            status.update(
                label="Response completed !", state="complete", expanded=False
            )

        # Display user personas in a dataframe
        df_user_persona = display_user_personas(st.session_state.users_personas)

        # Display Persona table in Streamlit
        st.subheader("AB Test User Personas")
        st.dataframe(df_user_persona)

        # Provide download option for user personas
        st.download_button(
            label="Download user personas as CSV",
            data=df_user_persona.to_csv().encode("utf-8"),
            file_name='user_persona_df.csv',
            mime='text/csv',
            icon=":material/download:",
        )

    # STEP 4: Generate User Responses to Email Campaigns
    if st.session_state.users_personas and st.button("Generate AB test Users Responses") and api_key:

        # Prepare email campaigns for user response simulation
        selected_campaigns = {'A':st.session_state.gen_email_campaign_a, 'B':st.session_state.gen_email_campaign_b}

        # Show status during user response generation
        with st.status(f"AI agents getting Persona responses on emails", expanded=True) as status:
            st.write(f"Constructing Prompt")
            time.sleep(2)

            st.write("Gathering responses from persona")

            # Initialize lists to store responses and track time
            all_user_responses = []
            total_time_elapsed = 0

            # Generate responses for each user persona
            for i, user in enumerate(st.session_state.users_personas.personas):

                # Track time for each persona's response
                start_time = time.time()
                user_resp, _ = response_to_email(user, selected_campaigns)
                end_time = time.time()

                all_user_responses.append(user_resp)

                persona_resp_elapsed_time = round((end_time - start_time), 2)

                st.write(f"Response recieved for persona {i+1} in {persona_resp_elapsed_time} seconds !!")
                total_time_elapsed += persona_resp_elapsed_time

                # Add delay between API calls to avoid rate limiting
                time.sleep(12)
            
            st.write(f"Total time elapsed collecting response: {total_time_elapsed}")
            
            st.write("Formating Response !!")
            time.sleep(1)
            
            status.update(
                label="Response completed !", state="complete", expanded=False
            )

        # Store all user responses in session state
        st.session_state.all_user_responses = all_user_responses

        # Display user responses in a dataframe
        df_user_responses = display_user_responses(st.session_state.all_user_responses)

        # Display Response table in Streamlit
        st.subheader("AB Test User Responses")
        st.dataframe(df_user_responses)

        # Provide download option for user responses
        st.download_button(
            label="Download persona response data as CSV",
            data=df_user_responses.to_csv().encode("utf-8"),
            file_name='user_response_df.csv',
            mime='text/csv',
            icon=":material/download:",
        )
    
    # STEP 5: Generate AB Test Result Report
    if st.session_state.all_user_responses and st.button("Generate AB test Result Report") and api_key:

        # Evaluate experiment results based on all collected data
        st.session_state.experiment_valuation = evaluate_experiment(product_input, st.session_state.resp_content, st.session_state.gen_email_campaign_a, st.session_state.gen_email_campaign_b, st.session_state.users_personas, st.session_state.all_user_responses)

        # Display sections of the experiment report
        st.subheader("AB Test Experiment Report")
        st.markdown(st.session_state.experiment_valuation.Introduction)
        st.markdown(st.session_state.experiment_valuation.Experiment_process)
        st.markdown(st.session_state.experiment_valuation.Email_Campaign_Analysis)
        st.markdown(st.session_state.experiment_valuation.User_Persona_Analysis)
        st.markdown(st.session_state.experiment_valuation.User_Response_Analysis)
        st.markdown(st.session_state.experiment_valuation.Performance_Metrics)
        st.markdown(st.session_state.experiment_valuation.Interpretations)
        st.markdown(st.session_state.experiment_valuation.Recommendations)
        st.markdown(st.session_state.experiment_valuation.Conclusion)
    
    # STEP 6: Save AB Test Report as DOCX
    if st.session_state.experiment_valuation and st.button("Save AB test Result Report") and api_key:

        # Generate DOCX report from experiment valuation
        doc_file = save_as_docx(st.session_state.experiment_valuation, "AB_Test_Report.docx", isWF=False)

        # Create BytesIO object to store document in memory
        bio = io.BytesIO()
        doc_file.save(bio)

        # Provide download button for the DOCX report
        st.download_button(
            label="Click here to download",
            data=bio.getvalue(),
            file_name="AB_Test_Report.docx",
            mime="docx"
        )

    # Author information and links
    st.write("Made with ❤️ by Amogh Mahadev kokari ©️ 2025 _||_ [linkedin](https://www.linkedin.com/in/amoghkokari/) _||_ [Portfolio](https://amoghkokari.github.io/portfolio.pdf) _||_ [Github](https://github.com/amoghkokari)")

# Entry point of the application
if __name__ == "__main__":
    main()